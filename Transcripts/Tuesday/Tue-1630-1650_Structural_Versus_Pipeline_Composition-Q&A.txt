
I would like to invite any questions that anyone has.
I thought it was a really interesting presentation. You have a restriction on your high-order functions. Because of that, that's what causes this structural composition to unfortunately have the depth of the nested lists. Have you explored removing that restriction on the high-order functions, because I think intuitively when you ask the question which has a larger search space, I thought the second one because I wasn't considering that structure of function, but any kind of high-order function. If you do allow any kind of high-order function, does the structural one become more difficult?
That is an interesting questionquestion. The question of how do we handle different high-order functions in this, with this idea of okay, does composing high-order functions that are not list functions make them more or less difficult to work with and how does that affect the search space. Is first of all the focus of the ongoing work and so stay tuned. With that said, we played around with the types for a few different other common high-order things that you do with high-order functions. Specifically in the data signs and data processing world, not general, like, things that you see here at ICLP but things that were done in the science classroom, and so we're working with that on tables, for example. We're looking at how it applies to trees as well. All of them have similar structural restrictions, but the interesting thing is actually for high-order functions which take in a function and then some sort of individual item. If you need to get a hold of me afterwards, there is an example that I have of walking through what this looks like in that case and the structural composition still holds while you're working with an item that has structure and soon as you bottom out to a primitive, anything goes.
In the two example codes you put up there, in one of them you have two spots where people are fill in code and in the other only one spot to fill in the code. Is there a way to eliminate that as a confounding variable?
I can share my screen, so I will put that on the screen if I can. In here there's composition they have funarg and another one. Composition B has the one funarg, the pipeline and structural. I don't see a way to eliminate that as a confounding factor so to speak, considering that the whole nature of structural composition is that one of the funargs is another high-order function, right? I think that that is part of what potentially may make it easier, but I think that - I'm not sure that that is a confounding factor to in observation as much as part of the observation steflt. But maybe I'm not quite understanding your question.
Is there a way to measure the effect of that independent of pipeline versus structural? Like measure that specific aspect of the two parts versus one part and then you can kind of see which one is causing - whether it is causing the effect or whether others even more effect and you have that on top of pipeline versus structural.
This is an interesting thing to know and maybe something that will go as we're coordinating this follow-up study. I can't off the top of my head construct an example that teases this apart while still comparing, like, without explicit live using one of niece types versus the other, compare one funarg versus two, but I'm happy to think about that more and get back to you.
I think that's all we've got time for. Thank you to the speakers again.
(APPLAUSE).
We now have a ten-minute break.
I already announced in on in course. You're not going to be too surprised that we do have at least one confidence case, so I urge everybody to improve on their mask wearing and there is a channel on confidence so if you have confidence or you suspect that you have confidence, please communicate with the organisers and we have some self-tests at the registration desk and we will get more as needed. Thank you.
