All right. Good. So we are here!
Welcome, everybody. I'm Simon Peyton Jones, and I'm thrilled to have you at this rather unusual conversation, so Arvind and Guy Steele are two giants of the functional programming community. Their influence has been profound, broad and sustained over at least five decades.
So I'm really pleased that they've agreed to have this informal conversation, which was going to be around a crackling fire in person with drinks, but alas it's somewhat remote, object their journeys through the world of functional programming and their reflections of what has happened and what has yet to happen.
Guy was always planned to be virtual from the beginning. Arvind made a long and somewhat tortuous journey and then on arriving has gone down with COVID. I'm so sorry, Arvind. If you fall over sideways on this conversation, we will know what happened. Thank you for joining us virtually.
So I think what I'm going to do is I'm going to engage in a kind of conversation with Guy and Arvind to get them to reflect a bit on their journeys, and then save up questions. I think we'll mostly have them at the end, unless there's anything super urgent. You can do that either in person, I'll try and leave some time, or by Airmeet questions.
I'm going to start off by taking us back to 1978. That was an important year, for me, anyway, that was the year on which John Hughes and I were in our final year at Cambridge. We had been studying -- John, we both started studying maths. After two years I decided it was just too difficult and went off to do electrical engineering. John, of course, cruised smoothly on to his maths degree. We both ended a postgraduate year in Cambridge. More importantly for this conversation, I think 1978 was the year you joined the faculty at MIT, Arvind. Jack Dennis hired you.
I think that was the same year at which you, Guy, published rabbit, a compiler for scheme, whose cleverness I was still decoding at least a decade later. You would enjoy reading that thesis if you haven't.
It was also the year or close to the year in which John backs won the Turing award, and in 1978 he gave the lecture which was entitled can programming be liberated from the van annoyman style, a functional style and its algebra programme.
It was saying to all of us have no truck with this dross of imperative -- functionality programming is the future, and we shall define new systems to execute it.
Pretty exciting. That for me as an undergraduate, and Guy and Arvind somewhat more established at that point, 1979 I think was the year that -- Conway published their book called introduction to the LSI systems, which was a kind of democratisation of VSLI design and moved it was out of the ambit of just at intel into at least universities.
So I was wondering if we could start maybe both of you by telling us a bit about the journey that led you to 1978, what you were trying to accomplish at this time, and what programming language research felt like at that time.
Maybe we'll go back a bit in time and lead up to 1978. Arvind, do you want to start with that?
>> Sure. I graduated -- I finished my PhD in '74 in California Irvine, and my PhD was -- there is echo here. Can you guys hear it?
>> Yeah, but we can hear you enough. Enough? We can pass, yeah.
>> All right.
>> Keep going.
>> Good. So I think my thesis was on modelling programme behaviour for operating systems evaluation and so on, and by the end of it I was convinced that this was a focus idea because the models were just so, so wrong, that anyway, the main decision I took at that point was I only want to be involved in the design of real things and evaluation of real things as opposed to models of things that may be done.
And at that time I came across some papers by Jack Dennis on data flow for signal processing, and they profoundly influenced me, so I thought that was cool, and I said I'm going to do parallel programming and languages, you know, for the next 10 years of my life, which I did, actually.
And then I also came across John backess's thing, and I don't know why I read thiz paper, but there was a paper in Bubble 2 or something, you know, on his reduction languages.
I pursued both of them, but I couldn't relate the two ideas together at all. What John was saying and what Jack was saying.
But the most interesting thing for me personally was that data flow graphs meant kind of what Jack was doing was you're to draw these graphs, and I think I was kind of a vulture on this. I was drawing very, very quick graphs, and very big is all relative.
I tried to do -- in data flow as defined by Jack Dennis. It was lots of space, and I said this is no way to write programmes. This is too verbose, and even if you were clever with visual tricks, it's not going to get there. I wanted to do a visual language, so that's how Irvine did a full language was born, and it directly translated into data flow graphs, so compiler was not an issue for me.
And this was also the time when structured programming was very big, so ID had very few of the constructs.
So on the way to MIT, I happened to meet, visit Tony at Oxford, and he said explain me, what is this ID language you're talking about, and I understood very quickly that he was least interested in data flow graphs. He just wanted to understand the properties of this particular language. And I tried and I tried, and it was very clear to me that nothing was getting across.
I mean, he was just kind of shaking his head and, you know, disgusted, or something. I don't know. When he said, stop, stop, what is the purpose of this language, and I constantly replied, he said don't you think a -- language is expressive enough. And I said, whoops, where is this going
