So I'm going to talk about models of computation effects.
And to tell you specifically what I'm going to talk about I'll start by giving you an example, here is example of computational effect relate to modelal. O let's suppose that we have programs, which can use a operations. So in particular, I have an operation called All she's binary so it takes to kind of programs as arguments, and it says hoose between the two programs have another operation called fail with non deterministic, and a third operation called cut. The way to understand these if I draw as a tree. And read off the values returned by the computation.
But then if we ever see a cut we stop and prune everything to the right of the cut.
So here we get 11, 12, 13, and the computation stops. So there is some kind of OI way implementing back tracking computations with these things, won't talk about in detail, but keep this picture in mind.
So... we want these terms to satisfy some equations. So when we interpret the terms inside the model we like the equations to be validated by the model.
So for example, we might like to say that if I do choice between M and N, where M is computation that cuts, this is equivalent to doing M, because everything to the right of M will just be pruned. Or write down other equations like this one on the bottom of the slide.
Perhaps less obviously why this is true. It says under some circumstances we can compute these computations N1, N2. So the question how do we actually construct a model of these effects in such a way to validate equations like these.
So there is existing story of constructing models of effects.
Way it goes is say something like, we can model effects usually using monad, or strong MORN, I'll forget about strength for this talk.
And these in some way come from presentations. And by presentation mean operations together with collection of axioms, equations we would like the model to validate. So nice story that says, once we have the presentation we can construct the monad in a way.
And so say more than this because every creation of the presentation will induce an algebraic operation And these are kind of the functions. In order to actually interpret the operations that autos the effect. So there are examples, interpret these computations with cuts. So we say something like, I computation there's a list of results together with some tag that says where the computation cuts. And this comes from the presentation, the presentation, says have free operations one called R, and one fail, 0 arguments and one called cuts taking 0 arguments. And then bunch of axioms require to satisfy. And R associative, fail as unit, and cut is left 0.
And then the nice thing is from the presentation, in addition to getting this monad in economical way, we have algebraic operations thing we use to interpret and fail and cut.
And so family functions take two computations and merge in some way, looking at tags and making some lists.
And so now let me go back to the equations.
Because every kind of model effect using monad, and algebraic operations this doesn't really give us a good way proving equations hold. The reason is these have side conditions, that say only computations that satisfy system property, computations that cut for example. And there's no really good way of expressing the conditions using this kind of previous story about ordinary monad.
>> Hopefully this will give you enough idea of what they are.
And so we can say something --
here are examples. You can say something like, I have this monad, created by natural numbers. E is a natural number.
And computation of grade E is list whose length is exactly E.
So list of length exactly 4th for example, don't form monad with concatenaition, but collectively create list called graded monad, are graded monad, bit like a monad accepts, we just kind of assign appropriate grade to the bind operator entered the return. This is in fact why I'm asking for an for an ordered monoid here. The monoid gives us the appropriate grade for the bank and return, all, for example, we could say, well great my list monad by taking list of length moth E for example. So there is MORN we can use for the cut example.
Essentially the way it works we take the ordinary monad few slides ago, and say impose side conditions on the computations.
So here have free raids, called bottom 1 and top. And can say, computation will cut, or either return something. And stop says, we don't know anything.
So we say for example, E where E is bottom, is list of X together with tag that we require actually to be cut, and compensation grade bottom is computation that actually cuts, form of graded monad I won't go through details, not important for the talk, but we have monad and model these computations showed in beginning. Reason this is good, we have way to express the side condition equations, so we take the equation. And now says, M has grade bottom. Which means M actually cuts. So in fact, if you calculate for a while, we can interpret the computations using the graded monad and this equation is actually validated.
So now the question I want to ask is there a story about presentations for graded monads?
So some stories I have graded presentation, that consist of created operations with some equations. And somehow want to extract canonical graded monad, together with some algebraic operations that can use to interpret my effects. Actually there is existing notion of graded presentation, which in fact would allows us to present this particularly graded monad.
The problem is we can not present these algebraic operations using the exist notion of operations. But if we only care about the... monad this is fine, but if we care abouts algebraic operations, and we do because we want to interpret you know, programs that involve all for example, then we actually can't use this existing notion. We do not get the correct algebraic operations. It is reason by the way in case of R we have several arguments that J NN have different grades, D1, and D2.
This is actually not permitted in the existing notion of gradedgraded -- there is condition that says, all the arguments have to have the same grade and can't extract operation doing this. The goal of this essentially develop nice notion of graded presentation, and call flexibly graded presentation,s, in such a way that we can actually extract economical graded monad together with algebraic operations and suitable a suitable notion of algebraic operation to interpret effect like this, he cut example, and do this by generalizing existing notion in some way.
And then, yeah, we kind of do tall the proofs and show we get graded monad and so on.
Okay, so for the remaining time I'll kind of go over this in detail and say what these things look like and how everything works, I'm not going to give full details of everything, not enough time to do this. But start by saying what flexibly graded presentation is.
Presentation is first signature.
So collection of operations.
And in this case, every operations has a list of input grades, and here D prime. And also some output grade D.
And given such a signature I can say, generate terms of the signature, by kind of applying operations to over terms. And so if we have operation whose impulse have D prime, and out put grade D we can actually apply the operations to here.
And we get... not obvious why the E is here, but to get the bind of the grade monad. And once we have terms, have collection of axiom and axiom is pair of term, pair of terms he how how want to be equated. And so in the nondeterminism example, say, have a bunch of operations in particular, these are operations, we'd have appropriate And then also a bunch of axioms I'm not writing down all of them but there's some associativity and things And in particular, something that saves our effect on y is the same as x, whatever X has bottom. When X definitely cuts.
So the rest of the story we want nice graded monad, with algebraic operations first step to doing this. First define the notion of algebra, a space together with operations. And subpoena that interpretations satisfy the axioms of the presentation.
So the notion of space here, I'm calling graded set, this is collection of sets one for every grade. So you think of the set AE as computation of grade E, interpretations bunch of function satisfying properties. ind of lift the interpretations of operations to interpretations of terms, and then ask are all for the interpretation function satisfying properties. Of each side of the axiom to be equal.
And come up with notion of equational logic, this essentially just says which equations we can derive from the axioms so a bunch of rules deriving equations this is rule for applying axiom and rule for congruence, and this is appropriate equation logic, in the sense it's sound and complete. Equation is derive NL exactly when it's true in every algebra. Okay, now can construct graded monad, easiest way to do that take the terms and KWOEGS by the the equational logic, not writing the whole details of this. But we have the monad, which is canonical in some sense, so precisely it satisfies some Universal property what this means is essentially the greatest monad is a folks as we can possibly get to these algebrasPor uses graded monad, and actually gives sense of uniqueness of graded monad. Final thing is we can actually extract some notion of algebraic operation. The algebraic operations are essentially interpretations of terms inside algebras. And can extract one such thing for every operation in presentation, these are the things we actually use to interpret the effects. Now I'm almost done, just want to mention one last thing, we can say exactly which graded monad can be presented in this way.
It turns out to be the greatest monad, using the existing notion of graded presentation, we do Jennize the notion, not in the sense we present more graded monad, but only in the sense we present more algebraic operations.
So actually, this is in some sense a nice note to the presentation and that we get large class of graded monads, but we actually get some nice algebraic operations that we can use to interpret effects, which is somehow the point of what we're trying to do here.
And can use the presentation to validate equation, to validate equations like the things I showed in the beginning.
But that's all I wanted to say, so I'll stop there. Thanks.