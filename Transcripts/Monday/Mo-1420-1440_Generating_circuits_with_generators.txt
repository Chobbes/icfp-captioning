Today I'm talking about generating circuits with generators, and first would like to motivate my choice. And why so recently, John L Hemnessy.
In the next decade, the Cambrian explosion... and so functional programming. And said that, the PL community standeds on the critical path to the new golden age computer architecture, FOFRJ FOFRJly, there is addone dance of intellectual challenges that are on the cusp of a new golden age different languages. So it looks like there are things to be done here. So there are some things that are motivating me personally. So one thing is open source sites. So for a long time. How was development tools were closed. And more and more tools, and so that's great. And another thing motivating me is RISC-V, open CPU architecture development at Berkeley bowfin in academia and in industry and.
Everyone loves it. Good motivation I think. Another thing, is FPGA's, the things that are kind of PCU's, interpret circuits.
And domain specific acceleration in the cloud.
So do some stuff for you.
So what is... digital circuit exactly. Some of you network of image of gates, and very low nodal. And take a high level approach. Of mini machines.
And this state changes from one to another. And discrete, and have two functions. One transition functions. And one that says... another output functions, what is the out put of circuit in current cycle.
Show you a few examples. Andstores the current value of the counter and then the other, which can increment the counter.
So the value of the counter trend cycle when the input is one, so we can with one d that one can be exploited bee localment.
And clearly see the transition function, and our function in this. And another variant of the counter. This... output depends on the site. No it stayed only in the next clock cycle. After the input, so, we see that in the first clock cycle. Implemented only in the second cycle.
So the last example I want to show you is one with counter flow, so you can traditionally express control flow in mini machines as state diagrams, and on the edges are the conditions, which show you, which conditions you change the current state.
So this kind of looks like flow truss. And program doesn't really use flow truss, any more.
Using... kind of looks like...
So what we really like to do is have some structural way to describe control flow.
. And this is what I decided to do. I developed programming language, and it's a language for describing automata of course. Its embedded in clash program. Cluster for hi bred.
Hybred. And also can be compiled.
I use Haskle, l. It is a...
can be embedded in a way. And another feature is... this tax is unbeded essentially. But, amount of state in machine is constant rate.
Okay. Core feature of this language. Yield statement, generic abstraction. Generates, and simultaneous l, and bvances the clock so that the next statements are using the input values from the next clock cycle. Let's go back to what I was showing before Right, so this example for circuit. And we see that each described, we have this variable, which stores the current value of the counter or loop, which runs forever. And we have statements inside the loop, the assignment will commence the call to this extent, we extend, one value, and then we change the value.
For example, if their input. Is the next output.
And... in the Moore, version.
It's a little bit more involved.
We need to yield the value which was in the state of the current cycle. But at the point, I do the weed of, or the next climate cycling.
Clear we are already in the next clock cycle, Given the semantic segment, right, so we need to access the value of the input from before the yield so we start using this statement here, and this part that will turns out is very useful language, so I added sugar following this.
So this is value of I before the yield.
So in this way, we don't need to use this let any more.
So last example, with control flow. And here we see normal structure way to describe. No longer a big switch statement.
Right?
So first loping is using continue statement. Another on until. And use magic prime. As in the same cycle. Before the yield.
And after those two loops, we had which is corresponds at the bottom, and then we need to go back to the start so is this. , so we see that this control flow and many other useful invoice of control flow can be easily described.
How this language works. And get number of transformation.
And eliminates loops, and have Lambda lifting, that makes all the functions... they have normalization which stands for almost a normal form. And in the multiple variables.
And here, the implicit replaced by explicit using data types, and next transition, makes that each function yields exactly once before making tail call so the functions can correspond 1 to 1, to states or group of states. And cleans up the code, and then when we have group of functions, and each exactly once, can mediate after that.
Ands here an example how that works. And you can read in the paper. Here we see how that works for mini counter, you have one function, and increments, the value, the mow variations as we see the as we see it yields the value which was the parameter, but course, or if the income and value. And last example, from counter flow, compiles. It's easy to see recursive functions that use if statements to select which function is the next state.
Okay. So... now it's time to see some applications.
So this is how language develops. How does it impact.
Can we do something with it?
So first example pretty simple.
Display. Probably know them.
HDA 4478200. If never programmed them. Before you start writing to them you need to initialize them there is a sequence of commands which needs to be timed exactly to initialize the displays on the after them. Often initialization, you can work with them m. So, normally you will have them using microcontrollers. And it's easy, if you try different languages it's complex.
So I SFOUPD imply LEMation called open hours I tried to implement this time, using... so my implementation, only 149 Were only 40 code lines of yield FSM, and that has those helper definition, and 26 blocks, that look like this, describes all the things to timing, and counting amount of timing for each command to output thes that happen on operations, and so on, so it's not easy to read, write, and not anything you want to work with.
And when you use, FSM becomes something like this..
And path is here. So this initial sequence is first 8 calls and cools and delay.
First arguments is amount of mille seconds to wait. Is second, because the display was giving data, and last argument is instruction we send. And thanks, to... pretty incredible.
And just wait or commands in the on the bus, and when the command that is we just send it to the days play. Display.
Obviously, implement risk five processor and implemented not one but three of them, or three of them are multi cycle. Like textbook one. And first one, not complicated. And the same data process before.
And the last one, youthe most experimental one, where I imprinted the whole multigrid processor using either the FSM.
.
So replacing control path. And keeping the same performance, as before.
The implementation. Quite a lot smaller. And some performance loss.
And didn't yet find the reason for that. Still open question why that happened. So the conclusions we can compare can compile structural procedure, and conclusions.
We can compile structural procedural content without data.
I think that that's right. So now we can write things like this in much more readable and maintainable way. And we didn't lose expressivity in development right so we can all the things we could do in verilog or VHDL, we can still do. The code in the language is shorter. And lowers the barrier to enter.
Okay, so some work I like to do later. And functions, for this.
And this is first of the functions I like to do simple.
And because, you have this kind of of effect, look if there this can be generalized in some way.
And that's all, thank you.
